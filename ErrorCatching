--Error catching file 
--Assignment 2 

DECLARE

--Constants
    k_tDebit CHAR(1) := 'D';
    k_tCredit CHAR(1) := 'C';
	
--Cursor
    CURSOR c_update IS
    SELECT *
    FROM NEW_TRANSACTIONS;

    Cursor c_check IS
    SELECT *
    FROM NEW_TRANSACTIONS;
	
	Cursor c_detail IS
	SELECT *
	FROM TRANSACTION_DETAIL;
	
rec_check c_check%ROWTYPE;
rec_detail c_detail%ROWTYPE;
	
--Variables 
	v_current_trans number;
	v_transaction_balanced number := 0;
	v_exists boolean;
-- Exceptions
	e_invalidAccNum EXCEPTION;
	e_negative_amount EXCEPTION;
	e_invalidTransType EXCEPTION;
	e_missingTransNum EXCEPTION;
	e_uneven_transaction_balance EXCEPTION;
	
/*
--New Transaction Variablaes (For Ease)
    v_ntTransNo NEW_TRANSACTIONS.Transaction_no%TYPE;
    v_ntTransDate NEW_TRANSACTIONS.Transaction_date%TYPE;
    v_ntDesc NEW_TRANSACTIONS.Description%TYPE;
    v_ntAccNo NEW_TRANSACTIONS.Account_no%TYPE;
    v_ntTransType NEW_TRANSACTIONS.Transaction_type%TYPE;
    v_ntTransAmount NEW_TRANSACTIONS.Transaction_amount%TYPE;
*/

begin
	open c_check;
	for r_update_rows in c_update LOOP
		
		v_current_trans := r_update_rows.transaction_no;
		
		BEGIN 
			
			loop
				fetch c_check into rec_check;
				v_transaction_balanced := 0;
				v_exists = false;
				if(rec_check.transaction_no is null) then 
					raise e_missingTransNum;
				end if;
				
				--exit when (rec_check.transaction_no <> v_current_trans) or (c_check%NOTFOUND);
				
				LOOP
					fetch c_detail into rec_detail;
					if(rec_check.account_no = rec_detail.account_no) then
						v_exists = true;
					end if;
				end loop;
				if(v_exists = false) then
					raise e_invalidAccNum;
				end if;
				
				if(rec_check.transaction_amount < 0) then 
					raise e_negative_amount;
				end if;
				
				if(rec_check.transaction_type <> 'D' and rec_check.transaction_type <> 'C') THEN
					raise e_invalidTransType;
				end if;
				
				if(rec_check.transaction_type = 'D') then 
					v_transaction_balanced := v_transaction_balanced + rec_check.transaction_amount;
				else 
					v_transaction_balanced := v_transaction_balanced - rec_check.transaction_amount;
				end if;
			
			end loop;
			
			if(v_transaction_balanced <> 0)then 
				raise e_uneven_transaction_balance;
			end if;
		
		EXCEPTION
		--I dont think doing these as application errors is the best call 
		--as it will terminat the program 
		--Stuff can also be added to the error table 
			
			WHEN e_invalidAccNum THEN
				insert (rec_check.transaction_no, sysdate, "Account # does not exist", "invalidAccNum")
				into wkis_error_log;
				--RAISE_APPLICATION_ERROR(-20031, 'Account # does not exist');
			WHEN e_negative_amount THEN
				insert (rec_check.transaction_no, sysdate, "Negative values are invalid", "negativeAmount")
				into wkis_error_log;
				--RAISE_APPLICATION_ERROR(-20032, 'Negative values are invalid');
			WHEN e_invalidTransType THEN
				insert (rec_check.transaction_no, sysdate, "Invalid trasaction type", "invalidTransType")
				into wkis_error_log;
				--RAISE_APPLICATION_ERROR(-20033, 'Invalid trasaction type');
			WHEN e_missingTransNum THEN
				insert (null, sysdate, "Missing transaction number", "missingTransNum")
				into wkis_error_log;
				--RAISE_APPLICATION_ERROR(-20034, 'Missing transaction number');
			WHEN e_uneven_transaction_balance then 
				insert (rec_check.transaction_no, sysdate, "The Transaction Doesn't balance", "unevenTransBal")
				into wkis_error_log;
				--RAISE_APPLICATION_ERROR(-20035, 'The Transaction Doesnt balance');
			WHEN others then 
				DBMS_OUTPUT.PUT_LINE('Some other error occured');
			
		END;
		
		
		
		--the updates can start for transaction number (v_current_trans)
		--Still not sure how to do this 
		--Like to update all the stuff with this account number because
		--we dont want to keep passing it to the error handling cursor I dont think 
		--But ill wait to see what gose on
		--also it says 2 nested cursors meening 2 cursors in total, the 2 that I have and 
		--The account one for miguel so thats good news 
		
		
		--commit;	 --Not sure if this should go here 
	END loop;

END;
/
